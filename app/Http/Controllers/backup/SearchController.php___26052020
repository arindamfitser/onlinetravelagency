<?php

namespace App\Http\Controllers;
use App\Filter;
use App\Countries;
use App\Regions;
use App\States;
use App\Hotels;
use App\Accommodations;
use App\Species;
use App\Inspirations;
use App\Experiences;
use App\HotelAccommodationRelation;
use App\HotelSpeciesRelation;
use App\HotelInspirationsRelation;
use App\HotelExperiencesRelation;
use App\HotelContact;
use App\HotelGallery;
use App\HotelAddress;
use App\KeyFeature;
use App\ServiceFacility;
use App\RoomFacility;
use App\Recreation;
use App\HotelFeaturesRelation;
use App\ServiceFacilitiesTranslation;
use App\RoomFacilitiesTranslation;
use App\RecreationTranslation;
use App\HotelAward;
use App\Rooms;
use App\FoodDrink;
use App\Review;
use App\Fisherman;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use Illuminate\Http\Request;
use Session;

class SearchController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        //$this->middleware('auth');
    }

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {   
        $filter = new Filter;
        if($request->keywords)
        {
         $hotels=$filter->parce_kayword($request->keywords);

         if(!empty($hotels)){
          //var_dump($hotels);
             foreach ($hotels as $key => $hotel) {
                   $hotel->address = HotelAddress::where('hotel_id', '=' , $hotel->id)->get()->first();
                   if($hotel->address==""){
                     $hotel->address = HotelAddress::where('hotel_id', '=' , $hotel->hotel_id)->get()->first();
                   } 
                   $hotel->galleries= HotelGallery::where('hotel_id', '=' , $hotel->id)->get()->all();
                   $hotel->price = Rooms::where('hotel_id', '=' , $hotel->id)->min('base_price');
                   $hotel->review = Review::where('hotel_id', '=' , $hotel->id)->where('status', '=' , 1)->get()->all();
                   $hotel->features = KeyFeature::join('hotel_features_relations', 'key_features.id', '=', 'hotel_features_relations.features_id')
              ->where('hotel_features_relations.hotel_id', '=', $hotel->id)
              ->get()->all();

                    $hotel->fishing_data = Fisherman::where('hotel_id', '=' , $hotel->id)->get()->first();
                    if(empty($hotel->fishing_data)){
                       $hotel->fishing_data = Fisherman::where('hotel_id', '=' , $hotel->hotel_id)->get()->first();
                    }
                 
             }
            return view('frontend.hotels.search', compact('hotels', 'hotels'));
         }else{
                return view('frontend.hotels.empty');
          }
        }
     }

    public function hotelDetails($slug){
       
           $hotel = Hotels::whereTranslation('hotels_slug', $slug)->first();;
           
           //var_dump($hotel);
        if($hotel){
            $hotel->features = KeyFeature::join('hotel_features_relations', 'key_features.id', '=', 'hotel_features_relations.features_id')
              ->where('hotel_features_relations.hotel_id', '=', $hotel->id)
              ->get()->all();
            $hotel->servicefacilities = ServiceFacility::join('service_facilities_translations', 'service_facilities.id', '=', 'service_facilities_translations.service_facilities_id')
              ->where('service_facilities_translations.hotel_id', '=', $hotel->id)
              ->get()->all();
            $hotel->roomfacilities = RoomFacility::join('room_facilities_translations', 'room_facilities.id', '=', 'room_facilities_translations.room_facilities_id')
              ->where('room_facilities_translations.hotel_id', '=', $hotel->id)
              ->get()->all();
            $hotel->recreations = Recreation::join('recreation_translations', 'recreations.id', '=', 'recreation_translations.recreation_id')
              ->where('recreation_translations.hotel_id', '=', $hotel->id)
              ->get()->all();
            $hotel->rooms = Rooms::where('hotel_id', '=', $hotel->id)
              ->get()->all();
            $hotel->food_drinks = FoodDrink::where('hotel_id', '=', $hotel->id)
              ->get()->all();
            $hotel->galleries = HotelGallery::where('hotel_id', '=' , $hotel->id)->get();
            $hotel->hotelcontact = HotelContact::where('hotel_id', '=' , $hotel->id)->get()->first();
            $hotel->hoteladdress = HotelAddress::where('hotel_id', '=' , $hotel->id)->get()->first();
            $hotel->hotelawards = HotelAward::where('hotel_id', '=' , $hotel->id)->get();
            $hotel->hotelreview = Review::where('hotel_id', '=' , $hotel->id)->where('status', '=' , 1)->get();
            
        }

        return view('frontend.hotels.details', compact('hotel', 'hotel'));
    }

    public function xmlhotelDetails(Request $request, $id){
      $quantity_adults = $request->quantity_adults;
      $quantity_childs = $request->quantity_childs;
      $quantity_rooms = $request->quantity_rooms;
      $hotels = DB::table('hotel_master_xml')->join('hotel_description_xml', 'hotel_master_xml.id', '=', 'hotel_description_xml.hotel_id')->join('hotel_address_xml', 'hotel_master_xml.id', '=', 'hotel_address_xml.hotel_id')->where('hotel_master_xml.id', $id)->get()->first();
      $images = DB::table('hotel_images_xml')->select('*')->where('hotel_images_xml.hotel_id', $id)->get()->all();
      $amenity = DB::table('hotel_amenity_xml')->select('*')->where('hotel_amenity_xml.hotel_id', $id)->get()->all();
      $results = $request->results;
      $dataArray = array('hotels' => $hotels, 'images' => $images, 'amenity' => $amenity, 'results' => $results);
      // foreach(unserialize($results) as $k => $val){
      //   $req = array();
      //   $req['quoteid'] = $val['@attributes']['id'];
      //   $req['room'][0]['adult'] = array();
      //   $req['room'][0]['child'] = array();
      //   for($i = 0; $i < $quantity_adults; $i++){
      //     $tmp = array();
      //     $tmp['title'] = 'Mr';
      //     $tmp['first'] = 'a';
      //     $tmp['last'] = 'b';
      //     $req['room'][0]['adult'][] = $tmp;
      //   }
      //   for($j = 0; $j < $quantity_childs; $j++){
      //     $tmp = array();
      //     $tmp['age'] = '3';
      //     $tmp['title'] = 'Mr';
      //     $tmp['first'] = 'a';
      //     $tmp['last'] = 'b';
      //     $req['room'][0]['child'][] = $tmp;
      //   }
      //   $filter = new Filter;
      //   $xml = $filter->BookingPrepareXMLNew($req);
      //   $url = get_option('stuba_post_url')."/RXLServices/ASMX/XmlService.asmx"; 
      //   $data = $filter->fatchRoomsxml($url, $xml);
      //   // echo "<pre>";
      //   // print_r($data);
      //   // die;
      // }
      return view('frontend.hotels.xmldetails', compact('dataArray', 'quantity_adults', 'quantity_childs', 'quantity_rooms'));
    }

    public function byDestination()

    {
        $accommodation_search = DB::table('regions_translations')->select('*', 'hotels.id as hotel_id')->join('hotels', 'regions_translations.regions_id', '=', 'hotels.region_id')->join('hotel_accommodation_relations', 'hotels.id', '=', 'hotel_accommodation_relations.hotel_id')->groupBy('hotels.region_id')->get()->all();
        $experience_search = DB::table('regions_translations')->join('hotels', 'regions_translations.regions_id', '=', 'hotels.region_id')->join('hotel_experiences_relations', 'hotels.id', '=', 'hotel_experiences_relations.hotel_id')->groupBy('hotels.region_id')->get()->all();
        $inspiration_search = DB::table('regions_translations')->join('hotels', 'regions_translations.regions_id', '=', 'hotels.region_id')->join('hotel_inspirations_relations', 'hotels.id', '=', 'hotel_inspirations_relations.hotel_id')->groupBy('hotels.region_id')->get()->all();
        $species_search = DB::table('regions_translations')->join('hotels', 'regions_translations.regions_id', '=', 'hotels.region_id')->join('hotel_species_relations', 'hotels.id', '=', 'hotel_species_relations.hotel_id')->groupBy('hotels.region_id')->get()->all();
        return view('frontend.hotels.destinations', compact('accommodation_search', 'experience_search', 'inspiration_search', 'species_search'));
    }

    public function get_rg_type_data(Request $request){
      //print_r($request->all());
      $type = $request->type;
      $data_id = $request->data_id;
      switch ($type) {
         case 'accommodation':
           $search_data = DB::table('regions_translations')->select('*', 'hotels.id as hotel_id')->join('hotels', 'regions_translations.regions_id', '=', 'hotels.region_id')->join('hotel_accommodation_relations', 'hotels.id', '=', 'hotel_accommodation_relations.hotel_id')->where('hotel_accommodation_relations.accommodation_id', '=', $data_id)->groupBy('hotels.region_id')->get()->all();
          break;
        case 'experience':
           $search_data = DB::table('regions_translations')->join('hotels', 'regions_translations.regions_id', '=', 'hotels.region_id')->join('hotel_experiences_relations', 'hotels.id', '=', 'hotel_experiences_relations.hotel_id')->where('hotel_experiences_relations.experiences_id', '=', $data_id)->groupBy('hotels.region_id')->get()->all();
          break;
        case 'inspiration':
           $search_data = DB::table('regions_translations')->join('hotels', 'regions_translations.regions_id', '=', 'hotels.region_id')->join('hotel_inspirations_relations', 'hotels.id', '=', 'hotel_inspirations_relations.hotel_id')->where('hotel_inspirations_relations.inspirations_id', '=', $data_id)->groupBy('hotels.region_id')->get()->all();
          break;
        case 'species':
           $search_data = DB::table('regions_translations')->join('hotels', 'regions_translations.regions_id', '=', 'hotels.region_id')->join('hotel_species_relations', 'hotels.id', '=', 'hotel_species_relations.hotel_id')->where('hotel_species_relations.species_id', '=', $data_id)->groupBy('hotels.region_id')->get()->all();
          break;
      }
      if(!empty($search_data)){
        return view('frontend.hotels.region', compact('search_data', 'type'));
      }else{
        return view('frontend.hotels.empty');
      }
    }

    public function soapCurl(Request $request){
             $filter = new Filter;
            $xml = $filter->AvailabilitySearchXML($request);
             $url = "http://api.stuba.com/RXLServices/ASMX/XmlService.asmx"; 
             //setting the curl parameters.
             $data=$filter->fatchRoomsxml($url,$xml);
             echo 'Results=' .count($data["HotelAvailability"]);
             foreach ($data["HotelAvailability"] as $key => $value) {
                $data=$filter->HotelDetailXML($value["Hotel"]["@attributes"]["id"]);
         }  
    }

  public function destinationsEnroute(Request $request){
    ini_set('memory_limit', '-1');
    //Session::set('rooms', $request->ab);
    session(['rooms' => $request->ab]);
    //var_dump($request->all());
    $filter = new Filter;
    if($request->keywords){
      $xml = $filter->AvailabilitySearchXML($request);
      // header('Content-type: text/xml');
      // echo $xml; die;
      $url = "http://api.stuba.com/RXLServices/ASMX/XmlService.asmx"; 
        //setting the curl parameters.
      $data=$filter->fatchRoomsxml($url,$xml);
      // echo '<pre>';
      // print_r($data);
      // die;
      if(@$data["HotelAvailability"]){
        $hotels =array();
        $price =array();
        $result =array();
        $quantity_adults = $request->quantity_adults;
        $quantity_childs = $request->quantity_child;
        $quantity_rooms = $request->quantity_rooms;
        $currency = $data['Currency'];
        for ($i=0; $i < count($data["HotelAvailability"]) ; $i++) {
          // echo '<pre>';
          // print_r($data["HotelAvailability"][$i]);
          // die;
          @$hotel_id = $data["HotelAvailability"][$i]["Hotel"]["@attributes"]["id"];
          $check = DB::table('hotel_master_xml')->select('id')->where('hotel_master_xml.id', $hotel_id)->get()->first();
          echo '<pre>';
          print_r($check);
          die;


          if(isset($data["HotelAvailability"][$i]["Result"][0])){
            if(isset($data["HotelAvailability"][$i]["Result"][0]["Room"][0])){
            $prc = 0;
            foreach($data["HotelAvailability"][$i]["Result"][0]["Room"] as $key=>$room){
              $prc = $prc + $room["Price"]["@attributes"]["amt"];
            }
            @$price[] = $prc;
            }else{
            @$price[] = $data["HotelAvailability"][$i]["Result"][0]["Room"]["Price"]["@attributes"]["amt"];  
            }
          }else{
            if(isset($data["HotelAvailability"][$i]["Result"]["Room"][0])){
            $prc = 0;
            foreach($data["HotelAvailability"][$i]["Result"]["Room"] as $key=>$room){
              $prc = $prc + $room["Price"]["@attributes"]["amt"];
            }
            @$price[] = $prc;
            }else{
              //@$price[] = $data["HotelAvailability"][$i]["Result"][0]["Room"]["Price"]["@attributes"]["amt"]; 
              @$price[] = $data["HotelAvailability"][$i]["Result"]["Room"]["Price"]["@attributes"]["amt"];
            }  
          }
          @$result[] = $data["HotelAvailability"][$i]["Result"];
          $hotels[] = $filter->get_xml_hotel_details($hotel_id);
        }
        return view('frontend.hotels.rxmlsearch', compact('hotels', 'price', 'currency', 'result', 'quantity_adults', 'quantity_childs', 'quantity_rooms'));
      }else{
        return view('frontend.hotels.empty');
      }
    }
  }
}
